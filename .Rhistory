calendar_commercial<-tibble(Date=seq(ymd(paste(fishery_year, "-01-01", sep="")), ymd(paste(fishery_year, "12-31", sep="")), by=1)) %>%
mutate(DayofWeek = wday(Date, label=T, abbr=T), Stat_week_commercial = isoweek(Date+1))
return(list(Sport_Calendar=calendar_sport, Commercial_calendar=calendar_commercial))
}
generate_fishery_calendars
args(generate_fishery_calendars)
cal<-generate_fishery_calendars(fishery_year="2022")
cal
# Read in-river fishery handle data and join to look up tables ####
CR_data<-read_inriver_data(inriver_directory = inriver_directory,
inriver_filename = inriver_filename,
fishery_year=2022)
# Load functions and libraries ####
source("Functions/read_FRAM_data.R")
source("Functions/read_inriver_data.R")
source("Functions/calc_ER_HR.R")
library('gt')
library('tidyverse')
library('ggplot2')
# Set directories and file names for FRAM input data and inriver data ####
FRAM_directory <- "Data/FRAM/2022/"
FRAM_filename <- "Coho2229_STTNOF_041222.xlsx"
inriver_directory <- "Data/"
inriver_filename <- "Coho_inriver_harvest_accounting_input_2022_post-season_24Jan2023.xlsx"
# Read FRAM Input file ####
# This runs slow because it has to parse non-tabular data from large FRAM files
FRAM_data<-read_FRAM_data(FRAM_directory = FRAM_directory,
FRAM_filename = FRAM_filename)
# Read in-river fishery handle data and join to look up tables ####
CR_data<-read_inriver_data(inriver_directory = inriver_directory,
inriver_filename = inriver_filename,
fishery_year=2022)
inriver_directory
inriver_filename
fishery_year
if (!"tidyverse" %in% installed.packages()) install.packages("tidyverse")
if (!"readxl" %in% installed.packages()) install.packages("readxl")
library("tidyverse")
library("readxl")
source("Functions/generate_fishery_calendars.R")
# Generate sport and commercial fishing calendars from internal function "generate_fishery_calendars.R" ####
fishing_calendars<-generate_fishery_calendars(fishery_year)
fishing_calendars
# Read sport handle ####
sport_handle<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "Input_SportFishery_Handle",
skip = 2) %>%
mutate(Start_date=as_date(Start_date),
Kept_clipped_adults = ifelse(is.na(Kept_clipped_adults), 0, Kept_clipped_adults),
Kept_unclipped_adults = ifelse(is.na(Kept_unclipped_adults), 0, Kept_unclipped_adults),
Released_adults = ifelse(is.na(Released_adults), 0, Released_adults),
Kept_jacks = ifelse(is.na(Kept_jacks), 0, Kept_jacks),
Comment = as.character(Comment))
# Read commercial handle ####
commercial_handle<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "Input_CommercialFishery_Handle",
skip = 2) %>%
mutate(Start_date=as_date(Start_date),
Kept_clipped_adults = ifelse(is.na(Kept_clipped_adults), 0, Kept_clipped_adults),
Kept_unclipped_adults = ifelse(is.na(Kept_unclipped_adults), 0, Kept_unclipped_adults),
Released_adults = ifelse(is.na(Released_adults), 0, Released_adults),
Kept_jacks = ifelse(is.na(Kept_jacks), 0, Kept_jacks),
Comment = as.character(Comment))
# Read fishery areas ####
LUT_fishery_areas<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "LUT_Fishery_Areas",
skip = 2)
# Read gear types and associated information ####
LUT_gear<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "LUT_Gear",
skip = 2)
# Read timing curves and pivot to long format so it can be joined with other data ####
LUT_timing_curves<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "Input_Timing_curves",
skip = 2) %>%
mutate(Calendar_date=as_date(Calendar_date)) %>%
pivot_longer(cols=2:ncol(.), names_to = "Fishery_area") %>%
mutate(Prop_early=value) %>%
select(-value)
# Read LCN abundance data ####
LCN_abundance<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "Input_LCN_abundance",
skip = 2)
# Join sport and commercial handle to respective calendars
merge_sport<-left_join(sport_handle, fishing_calendars$Sport_Calendar, by=c("Start_date" = "Date"))
merge_commercial<-left_join(commercial_handle, fishing_calendars$Commercial_calendar, by=c("Start_date" = "Date"))
# Join all fishery data and LUT into a unified tibble/data.frame ####
join_all_fishery_data<-full_join(merge_commercial, merge_sport) %>%
left_join(LUT_fishery_areas, by="Fishery_area") %>%
rename(Comment = Comment.y) %>%
left_join(LUT_gear) %>%
left_join(LUT_timing_curves, by=c("Start_date" = "Calendar_date", "Fishery_area" = "Fishery_area")) %>%
relocate(Start_date, DayOfWeek, Start_time_commercial, Stat_week_commercial, Stat_week_sport, Gear_category,
Gear_name, Gear_configuration, Release_mortality_rate, Fishery_area, Above_Lewis_River,
Prop_unmarked_local, Prop_early, Commercial_vessel_count, Commercial_hours_open, Sport_vessel_count,
Sport_angler_count, Sport_bag_limit_adults)
# Join all fishery data and LUT into a unified tibble/data.frame ####
join_all_fishery_data<-full_join(merge_commercial, merge_sport) %>%
left_join(LUT_fishery_areas, by="Fishery_area") %>%
rename(Comment = Comment.y) %>%
left_join(LUT_gear) %>%
left_join(LUT_timing_curves, by=c("Start_date" = "Calendar_date", "Fishery_area" = "Fishery_area")) #%>%
join_all_fishery_data
glimpse(join_all_fishery_data)
merge_sport
merge_commercial
glimpse(merge_sport)
glimpse(merge_commercial)
LUT_timing_curves
# Join all fishery data and LUT into a unified tibble/data.frame ####
join_all_fishery_data<-full_join(merge_commercial, merge_sport) %>%
left_join(LUT_fishery_areas, by="Fishery_area") %>%
rename(Comment = Comment.y) %>%
left_join(LUT_gear) %>%
left_join(LUT_timing_curves, by=c("Start_date" = "Calendar_date", "Fishery_area" = "Fishery_area")) %>%
relocate(Start_date, DayOfWeek, Start_time_commercial, Stat_week_commercial, Stat_week_sport, Gear_category,
Gear_name, Gear_configuration, Release_mortality_rate, Fishery_area, Above_Lewis_River,
Prop_unmarked_local, Prop_early, Commercial_vessel_count, Commercial_hours_open, Sport_vessel_count,
Sport_angler_count, Sport_bag_limit_adults)
source("Functions/generate_fishery_calendars.R")
# Generate sport and commercial fishing calendars from internal function "generate_fishery_calendars.R" ####
fishing_calendars<-generate_fishery_calendars(fishery_year)
# Read sport handle ####
sport_handle<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "Input_SportFishery_Handle",
skip = 2) %>%
mutate(Start_date=as_date(Start_date),
Kept_clipped_adults = ifelse(is.na(Kept_clipped_adults), 0, Kept_clipped_adults),
Kept_unclipped_adults = ifelse(is.na(Kept_unclipped_adults), 0, Kept_unclipped_adults),
Released_adults = ifelse(is.na(Released_adults), 0, Released_adults),
Kept_jacks = ifelse(is.na(Kept_jacks), 0, Kept_jacks),
Comment = as.character(Comment))
# Read commercial handle ####
commercial_handle<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "Input_CommercialFishery_Handle",
skip = 2) %>%
mutate(Start_date=as_date(Start_date),
Kept_clipped_adults = ifelse(is.na(Kept_clipped_adults), 0, Kept_clipped_adults),
Kept_unclipped_adults = ifelse(is.na(Kept_unclipped_adults), 0, Kept_unclipped_adults),
Released_adults = ifelse(is.na(Released_adults), 0, Released_adults),
Kept_jacks = ifelse(is.na(Kept_jacks), 0, Kept_jacks),
Comment = as.character(Comment))
# Read fishery areas ####
LUT_fishery_areas<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "LUT_Fishery_Areas",
skip = 2)
# Read gear types and associated information ####
LUT_gear<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "LUT_Gear",
skip = 2)
# Read timing curves and pivot to long format so it can be joined with other data ####
LUT_timing_curves<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "Input_Timing_curves",
skip = 2) %>%
mutate(Calendar_date=as_date(Calendar_date)) %>%
pivot_longer(cols=2:ncol(.), names_to = "Fishery_area") %>%
mutate(Prop_early=value) %>%
select(-value)
# Read LCN abundance data ####
LCN_abundance<-read_excel(path = paste(inriver_directory, inriver_filename, sep=""),
sheet = "Input_LCN_abundance",
skip = 2)
# Join sport and commercial handle to respective calendars
merge_sport<-left_join(sport_handle, fishing_calendars$Sport_Calendar, by=c("Start_date" = "Date"))
merge_commercial<-left_join(commercial_handle, fishing_calendars$Commercial_calendar, by=c("Start_date" = "Date"))
# Join all fishery data and LUT into a unified tibble/data.frame ####
join_all_fishery_data<-full_join(merge_commercial, merge_sport) %>%
left_join(LUT_fishery_areas, by="Fishery_area") %>%
rename(Comment = Comment.y) %>%
left_join(LUT_gear) %>%
left_join(LUT_timing_curves, by=c("Start_date" = "Calendar_date", "Fishery_area" = "Fishery_area")) %>%
relocate(Start_date, DayOfWeek, Start_time_commercial, Stat_week_commercial, Stat_week_sport, Gear_category,
Gear_name, Gear_configuration, Release_mortality_rate, Fishery_area, Above_Lewis_River,
Prop_unmarked_local, Prop_early, Commercial_vessel_count, Commercial_hours_open, Sport_vessel_count,
Sport_angler_count, Sport_bag_limit_adults)
join_all_fishery_data
glimpse(join_all_fishery_data)
# Load functions and libraries ####
source("Functions/read_FRAM_data.R")
source("Functions/read_inriver_data.R")
source("Functions/calc_ER_HR.R")
library('gt')
library('tidyverse')
library('ggplot2')
# Set directories and file names for FRAM input data and inriver data ####
FRAM_directory <- "Data/FRAM/2022/"
FRAM_filename <- "Coho2229_STTNOF_041222.xlsx"
inriver_directory <- "Data/"
inriver_filename <- "Coho_inriver_harvest_accounting_input_2022_post-season_24Jan2023.xlsx"
# Read FRAM Input file ####
# This runs slow because it has to parse non-tabular data from large FRAM files
FRAM_data<-read_FRAM_data(FRAM_directory = FRAM_directory,
FRAM_filename = FRAM_filename)
# Read in-river fishery handle data and join to look up tables ####
CR_data<-read_inriver_data(inriver_directory = inriver_directory,
inriver_filename = inriver_filename,
fishery_year=2022)
CR_data
# Calculate exploitation rates and harvest rates ####
calcs<-calc_ER_HR(FRAM_object = FRAM_data,
CR_data_object = CR_data)
calcs
glimpse(calcs)
# Generate data summaries ####
# Handle summary table by fishery #####
handle_summary<-calcs %>%
group_by(Fishery_area, Gear_category, Gear_name) %>%
summarize(Kept_Clipped_Early = sum(Kept_clipped_adults_early, na.rm = T),
Kept_Clipped_Late = sum(Kept_clipped_adults_late, na.rm = T),
Kept_UnClipped_Early = sum(Kept_unclipped_adults_early, na.rm = T),
Kept_UnClipped_Late = sum(Kept_unclipped_adults_late, na.rm = T),
Released_Early = sum(Released_adults_early, na.rm = T),
Released_Late = sum(Released_adults_late, na.rm = T),
Release_Morts_Early = sum(Released_mortality_adults_early, na.rm = T),
Release_Morts_Late = sum(Released_mortality_adults_late, na.rm = T)) %>%
mutate_if(is.numeric, round, 0)
# Print handle summary table for Rmarkdown
gt(handle_summary, rowname_col = "Fishery_area", groupname_col = c("Gear_category", "Gear_name")) %>%
summary_rows(groups = T, fns=list(Subtotal = "sum")) %>%
grand_summary_rows(fns = list(Grand_Total = "sum"))
# Exploitation rate table by fishery area
tab2<-calcs %>%
group_by(Fishery_area) %>%
summarize(ER_Early = sum(ER_early), ER_Late = sum(ER_late)) %>%
mutate_if(is.numeric, percent, accuracy = 0.01)
#HR_Early = percent(sum(HR_marked_early), accuracy = 0.01), HR_Late = percent(sum(HR_marked_late), accuracy = 0.01),
gt(tab2, rowname_col = "Fishery_area") %>%
summary_rows(groups = T, fns=list(Subtotal = "sum")) %>%
grand_summary_rows(fns = list(Grand_Total = "sum"))
# Generate summary plots ####
#colors<-c('red', 'blue', 'green', 'purple', 'grey', 'black')
calcs %>%
ggplot(aes(x=Stat_week_commercial, y=ER_early, fill = Fishery_area)) +
geom_col() +
labs(title = "Commerical ER by stat week")
source("Functions/generate_fishery_calendars.R")
source("Functions/generate_fishery_calendars.R")
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
generate_fishery_calendars(fishery_year="2022")
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
fishery_calendars<-generate_fishery_calendars(fishery_year="2022")
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022") %>%
filter(Date >= "2022-08-01")
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01")
sport_calendar
source("Functions/generate_fishery_calendars.R")
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01")
sport_calendar
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01" & DayofWeek == "Mon")
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01" && DayofWeek == "Mon")
sport_calendar
sport_calendar
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01")
sport_calendar
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
sport_calendar
# Load functions and libraries ####
source("Functions/read_FRAM_data.R")
source("Functions/read_inriver_data.R")
source("Functions/calc_ER_HR.R")
source("Functions/generate_fishery_calendars.R")
library('gt')
library('tidyverse')
library('ggplot2')
# Set directories and file names for FRAM input data and inriver data ####
FRAM_directory <- "Data/FRAM/2022/"
FRAM_filename <- "Coho2229_STTNOF_041222.xlsx"
inriver_directory <- "Data/"
inriver_filename <- "Coho_inriver_harvest_accounting_input_2022_post-season_24Jan2023.xlsx"
# Read FRAM Input file ####
# This runs slow because it has to parse non-tabular data from large FRAM files
FRAM_data<-read_FRAM_data(FRAM_directory = FRAM_directory,
FRAM_filename = FRAM_filename)
generate_fishery_calendars(fishery_year="2022")
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_Calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Sun')
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_Calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Sun')
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_Calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_Calendar #%>%
commercial_calendar
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Sun')
commercial_calendar
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar
# Load functions and libraries ####
source("Functions/read_FRAM_data.R")
source("Functions/read_inriver_data.R")
source("Functions/calc_ER_HR.R")
source("Functions/generate_fishery_calendars.R")
library('gt')
library('tidyverse')
library('ggplot2')
# Set directories and file names for FRAM input data and inriver data ####
FRAM_directory <- "Data/FRAM/2022/"
FRAM_filename <- "Coho2229_STTNOF_041222.xlsx"
inriver_directory <- "Data/"
inriver_filename <- "Coho_inriver_harvest_accounting_input_2022_post-season_24Jan2023.xlsx"
# Read FRAM Input file ####
# This runs slow because it has to parse non-tabular data from large FRAM files
FRAM_data<-read_FRAM_data(FRAM_directory = FRAM_directory,
FRAM_filename = FRAM_filename)
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
# Read in-river fishery handle data and join to look up tables ####
CR_data<-read_inriver_data(inriver_directory = inriver_directory,
inriver_filename = inriver_filename,
fishery_year=2022)
commercial_calendar
commercial_calendar %>% filter(Stat_week_commercial >=37)
commercial_calendar %>% filter(Stat_week_commercial >=38)
commercial_calendar %>% filter(Stat_week_commercial >=35)
commercial_calendar %>% filter(Stat_week_commercial <45)
commercial_calendar %>% filter(Stat_week_commercial >34 & Stat_week_commercial <45)
commercial_calendar %>% filter(Stat_week_commercial >35 & Stat_week_commercial <45)
commercial_calendar %>% filter(Stat_week_commercial >333 & Stat_week_commercial <45)
commercial_calendar %>% filter(Stat_week_commercial >33 & Stat_week_commercial <45)
# Read in-river fishery handle data and join to look up tables ####
CR_data<-read_inriver_data(inriver_directory = inriver_directory,
inriver_filename = inriver_filename,
fishery_year=2022)
# Calculate exploitation rates and harvest rates ####
calcs<-calc_ER_HR(FRAM_object = FRAM_data,
CR_data_object = CR_data)
# Generate data summaries ####
# Handle summary table by fishery #####
handle_summary<-calcs %>%
group_by(Fishery_area, Gear_category, Gear_name) %>%
summarize(Kept_Clipped_Early = sum(Kept_clipped_adults_early, na.rm = T),
Kept_Clipped_Late = sum(Kept_clipped_adults_late, na.rm = T),
Kept_UnClipped_Early = sum(Kept_unclipped_adults_early, na.rm = T),
Kept_UnClipped_Late = sum(Kept_unclipped_adults_late, na.rm = T),
Released_Early = sum(Released_adults_early, na.rm = T),
Released_Late = sum(Released_adults_late, na.rm = T),
Release_Morts_Early = sum(Released_mortality_adults_early, na.rm = T),
Release_Morts_Late = sum(Released_mortality_adults_late, na.rm = T)) %>%
mutate_if(is.numeric, round, 0)
# Print handle summary table for Rmarkdown
gt(handle_summary, rowname_col = "Fishery_area", groupname_col = c("Gear_category", "Gear_name")) %>%
summary_rows(groups = T, fns=list(Subtotal = "sum")) %>%
grand_summary_rows(fns = list(Grand_Total = "sum"))
calcs
glimpse(calcs)
unique(calcs$Gear_category)
commercial_calendar %>% filter(Stat_week_commercial >33 & Stat_week_commercial <45)
commercial_calendar %>% filter(Stat_week_commercial >33 & Stat_week_commercial <46)
# Load functions and libraries ####
source("Functions/read_FRAM_data.R")
source("Functions/read_inriver_data.R")
source("Functions/calc_ER_HR.R")
source("Functions/generate_fishery_calendars.R")
library('gt')
library('tidyverse')
library('ggplot2')
# Set directories and file names for FRAM input data and inriver data ####
FRAM_directory <- "Data/FRAM/2022/"
FRAM_filename <- "Coho2229_STTNOF_041222.xlsx"
inriver_directory <- "Data/"
inriver_filename <- "Coho_inriver_harvest_accounting_input_2022_post-season_24Jan2023.xlsx"
# Read FRAM Input file ####
# This runs slow because it has to parse non-tabular data from large FRAM files
FRAM_data<-read_FRAM_data(FRAM_directory = FRAM_directory,
FRAM_filename = FRAM_filename)
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar
commercial_calendar %>% filter(Stat_week_commercial %in% 38:44)
# Load functions and libraries ####
source("Functions/read_FRAM_data.R")
source("Functions/read_inriver_data.R")
source("Functions/calc_ER_HR.R")
source("Functions/generate_fishery_calendars.R")
library('gt')
library('tidyverse')
library('ggplot2')
# Set directories and file names for FRAM input data and inriver data ####
FRAM_directory <- "Data/FRAM/2022/"
FRAM_filename <- "Coho2229_STTNOF_041222.xlsx"
inriver_directory <- "Data/"
inriver_filename <- "Coho_inriver_harvest_accounting_input_2022_post-season_24Jan2023.xlsx"
# Read FRAM Input file ####
# This runs slow because it has to parse non-tabular data from large FRAM files
FRAM_data<-read_FRAM_data(FRAM_directory = FRAM_directory,
FRAM_filename = FRAM_filename)
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
# Read in-river fishery handle data and join to look up tables ####
CR_data<-read_inriver_data(inriver_directory = inriver_directory,
inriver_filename = inriver_filename,
fishery_year=2022)
# Read in-river fishery handle data and join to look up tables ####
CR_data<-read_inriver_data(inriver_directory = inriver_directory,
inriver_filename = inriver_filename,
fishery_year=2022)
# Calculate exploitation rates and harvest rates ####
calcs<-calc_ER_HR(FRAM_object = FRAM_data,
CR_data_object = CR_data)
# Generate data summaries ####
# Handle summary table by fishery #####
handle_summary<-calcs %>%
group_by(Fishery_area, Gear_category, Gear_name) %>%
summarize(Kept_Clipped_Early = sum(Kept_clipped_adults_early, na.rm = T),
Kept_Clipped_Late = sum(Kept_clipped_adults_late, na.rm = T),
Kept_UnClipped_Early = sum(Kept_unclipped_adults_early, na.rm = T),
Kept_UnClipped_Late = sum(Kept_unclipped_adults_late, na.rm = T),
Released_Early = sum(Released_adults_early, na.rm = T),
Released_Late = sum(Released_adults_late, na.rm = T),
Release_Morts_Early = sum(Released_mortality_adults_early, na.rm = T),
Release_Morts_Late = sum(Released_mortality_adults_late, na.rm = T)) %>%
mutate_if(is.numeric, round, 0)
# Print handle summary table for Rmarkdown
gt(handle_summary, rowname_col = "Fishery_area", groupname_col = c("Gear_category", "Gear_name")) %>%
summary_rows(groups = T, fns=list(Subtotal = "sum")) %>%
grand_summary_rows(fns = list(Grand_Total = "sum"))
# Exploitation rate table by fishery area
tab2<-calcs %>%
group_by(Fishery_area) %>%
summarize(ER_Early = sum(ER_early), ER_Late = sum(ER_late)) %>%
mutate_if(is.numeric, percent, accuracy = 0.01)
#HR_Early = percent(sum(HR_marked_early), accuracy = 0.01), HR_Late = percent(sum(HR_marked_late), accuracy = 0.01),
gt(tab2, rowname_col = "Fishery_area") %>%
summary_rows(groups = T, fns=list(Subtotal = "sum")) %>%
grand_summary_rows(fns = list(Grand_Total = "sum"))
# Generate summary plots ####
#colors<-c('red', 'blue', 'green', 'purple', 'grey', 'black')
calcs %>%
ggplot(aes(x=Stat_week_commercial, y=ER_early, fill = Fishery_area)) +
geom_col() +
labs(title = "Commerical ER by stat week")
# Load functions and libraries ####
source("Functions/read_FRAM_data.R")
source("Functions/read_inriver_data.R")
source("Functions/calc_ER_HR.R")
source("Functions/generate_fishery_calendars.R")
library('gt')
library('tidyverse')
library('ggplot2')
# Set directories and file names for FRAM input data and inriver data ####
FRAM_directory <- "Data/FRAM/2022/"
FRAM_filename <- "Coho2229_STTNOF_041222.xlsx"
inriver_directory <- "Data/"
inriver_filename <- "Coho_inriver_harvest_accounting_input_2022_post-season_7Mar2023.xlsx"
# Read FRAM Input file ####
# This runs slow because it has to parse non-tabular data from large FRAM files
FRAM_data<-read_FRAM_data(FRAM_directory = FRAM_directory,
FRAM_filename = FRAM_filename)
# Generate fishery sport and commercial fishery calendars for fishery inputs on template
sport_calendar<-generate_fishery_calendars(fishery_year="2022")$Sport_Calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
commercial_calendar<-generate_fishery_calendars(fishery_year="2022")$Commercial_calendar %>%
filter(Date >= "2022-08-01" & DayOfWeek == 'Mon')
# Read in-river fishery handle data and join to look up tables ####
CR_data<-read_inriver_data(inriver_directory = inriver_directory,
inriver_filename = inriver_filename,
fishery_year=2022)
# Calculate exploitation rates and harvest rates ####
calcs<-calc_ER_HR(FRAM_object = FRAM_data,
CR_data_object = CR_data)
# Generate data summaries ####
# Handle summary table by fishery #####
handle_summary<-calcs %>%
group_by(Fishery_area, Gear_category, Gear_name) %>%
summarize(Kept_Clipped_Early = sum(Kept_clipped_adults_early, na.rm = T),
Kept_Clipped_Late = sum(Kept_clipped_adults_late, na.rm = T),
Kept_UnClipped_Early = sum(Kept_unclipped_adults_early, na.rm = T),
Kept_UnClipped_Late = sum(Kept_unclipped_adults_late, na.rm = T),
Released_Early = sum(Released_adults_early, na.rm = T),
Released_Late = sum(Released_adults_late, na.rm = T),
Release_Morts_Early = sum(Released_mortality_adults_early, na.rm = T),
Release_Morts_Late = sum(Released_mortality_adults_late, na.rm = T)) %>%
mutate_if(is.numeric, round, 0)
# Print handle summary table for Rmarkdown
gt(handle_summary, rowname_col = "Fishery_area", groupname_col = c("Gear_category", "Gear_name")) %>%
summary_rows(groups = T, fns=list(Subtotal = "sum")) %>%
grand_summary_rows(fns = list(Grand_Total = "sum"))
# Exploitation rate table by fishery area
tab2<-calcs %>%
group_by(Fishery_area) %>%
summarize(ER_Early = sum(ER_early), ER_Late = sum(ER_late)) %>%
mutate_if(is.numeric, percent, accuracy = 0.01)
